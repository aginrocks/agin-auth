/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get health of the service (returns "ok") */
        get: operations["get_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login/options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get login options
         * @description Gets available login options for the user. If the user is not found, returns only password option.
         */
        get: operations["get_login_options"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log in with password
         * @description If user is not found or the password isn't enabled for the user returns the same response as if the password was incorrect.
         */
        post: operations["login_with_password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login/totp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log in with TOTP
         * @description **This endpoint can only be used as a second factor.** TOTP is not considered secure enough to be used as a primary authentication method.
         */
        post: operations["login_with_totp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/factors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get factors
         * @description Gets all authentication factors for the current user.
         */
        get: operations["get_factors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/factors/totp/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable TOTP
         * @description Generates TOTP secret and saves it. To fully enable TOTP, a call to `/api/settings/factors/totp/enable/confirm` is required.
         */
        post: operations["enable_totp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/factors/totp/enable/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm enabling TOTP
         * @description Confirm enabling TOTP by providing the TOTP code.
         */
        post: operations["confirm_enabling_totp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "error": "TOTP is already enabled. To rotate your TOTP secret, disable it first and then enable it again."
         *     } */
        AlreadyEnabledError: {
            error: string;
        };
        /** @example {
         *       "error": "User with this username or email already existsd"
         *     } */
        BadRequestError: {
            error: string;
        };
        /** @example {
         *       "success": true
         *     } */
        ConfirmTotpResponse: {
            success: boolean;
        };
        /** @example {
         *       "success": true,
         *       "id": "60c72b2f9b1d8c001c8e4f5a"
         *     } */
        CreateSuccess: {
            id: string;
            success: boolean;
        };
        EnableTotpBody: {
            /** @description The display name for the TOTP factor (for example authenticator app name). */
            display_name: string;
        };
        EnableTotpResponse: {
            /** @description QR code URL that'll add the TOTP factor to your authenticator app. Won't be shown again. */
            qr: string;
            /** @description The secret won't be shown again, so save it securely. */
            secret: string;
        };
        /** @enum {string} */
        FirstFactor: "password" | "webauthn" | "pgp";
        /** @example {
         *       "error": "Invalid 2FA code"
         *     } */
        Invalid2faCode: {
            error: string;
        };
        /** @example {
         *       "error": "Invalid username or password"
         *     } */
        InvalidUserOrPass: {
            error: string;
        };
        LoginBody: {
            password: string;
            username: string;
        };
        OptionsRepsonse: {
            options: components["schemas"]["FirstFactor"][];
        };
        PublicAuthFactors: {
            password: components["schemas"]["PublicPasswordFactor"];
            pgp: components["schemas"]["PublicPGPFactor"][];
            recovery_codes: components["schemas"]["PublicRecoveryCodeFactor"];
            totp?: null | components["schemas"]["PublicTOTPFactor"];
            webauthn: components["schemas"]["PublicWebAuthnFactor"][];
        };
        PublicPGPFactor: {
            display_name: string;
            fingerprint: string;
        };
        PublicPasswordFactor: {
            is_set: boolean;
        };
        PublicRecoveryCodeFactor: {
            /** Format: int32 */
            remaining_codes: number;
        };
        PublicTOTPFactor: {
            display_name: string;
            fully_enabled: boolean;
        };
        PublicWebAuthnFactor: {
            credential_id: string;
            display_name: string;
        };
        RegisterBody: {
            display_name: string;
            email: string;
            first_name: string;
            last_name: string;
            password: string;
            preferred_username: string;
        };
        /** @enum {string} */
        SecondFactor: "totp" | "webauthn" | "recoverycode" | "pgp";
        SuccessfulLoginResponse: {
            second_factors?: components["schemas"]["SecondFactor"][] | null;
            two_factor_required: boolean;
        };
        TotpCodeBody: {
            /** @description TOTP code to confirm enabling the factor. */
            code: string;
        };
        /** @example {
         *       "error": "Unauthorized"
         *     } */
        UnauthorizedError: {
            error: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    get_login_options: {
        parameters: {
            query: {
                /** @description Username or email address of the user the factors are requested for */
                username: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OptionsRepsonse"];
                };
            };
        };
    };
    login_with_password: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginBody"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessfulLoginResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidUserOrPass"];
                };
            };
        };
    };
    login_with_totp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TotpCodeBody"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessfulLoginResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invalid2faCode"];
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterBody"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSuccess"];
                };
            };
            /** @description BadRequest */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
        };
    };
    get_factors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicAuthFactors"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
        };
    };
    enable_totp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnableTotpBody"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnableTotpResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
            /** @description Already Enabled */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlreadyEnabledError"];
                };
            };
        };
    };
    confirm_enabling_totp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TotpCodeBody"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmTotpResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
            /** @description Already Enabled */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlreadyEnabledError"];
                };
            };
        };
    };
}
